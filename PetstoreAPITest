import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.annotations.Test;

public class PetstoreAPITest {

    private static final String BASE_URI = "https://petstore.swagger.io/v2";
    private static final String PET_ENDPOINT = "/pet";

    @Test
    public void agregarMascota() {
        String requestBody = "{\n" +
                "  \"id\": 1,\n" +
                "  \"category\": {\n" +
                "    \"id\": 0,\n" +
                "    \"name\": \"string\"\n" +
                "  },\n" +
                "  \"name\": \"doggie\",\n" +
                "  \"photoUrls\": [\n" +
                "    \"string\"\n" +
                "  ],\n" +
                "  \"tags\": [\n" +
                "    {\n" +
                "      \"id\": 0,\n" +
                "      \"name\": \"string\"\n" +
                "    }\n" +
                "  ],\n" +
                "  \"status\": \"available\"\n" +
                "}";

        Response response = RestAssured.given()
                .contentType(ContentType.JSON)
                .body(requestBody)
                .post(BASE_URI + PET_ENDPOINT);

        // Validar el status code esperado
        response.then().statusCode(200);

        // Validar el schema del response (puedes agregar más validaciones según la estructura esperada)
        response.then().assertThat().body("id", notNullValue());
        response.then().assertThat().body("name", equalTo("doggie"));
    }

    @Test
    public void obtenerMascotaExistente() {
        long petId = 1;

        Response response = RestAssured.get(BASE_URI + PET_ENDPOINT + "/" + petId);

        // Validar el status code esperado
        response.then().statusCode(200);

        // Validar el schema del response (puedes agregar más validaciones según la estructura esperada)
        response.then().assertThat().body("id", notNullValue());
    }

    @Test
    public void modificarMascotaExistente() {
        long petId = 1;

        String updatedRequestBody = "{\n" +
                "  \"id\": " + petId + ",\n" +
                "  \"category\": {\n" +
                "    \"id\": 0,\n" +
                "    \"name\": \"string\"\n" +
                "  },\n" +
                "  \"name\": \"updatedName\",\n" +
                "  \"photoUrls\": [\n" +
                "    \"string\"\n" +
                "  ],\n" +
                "  \"tags\": [\n" +
                "    {\n" +
                "      \"id\": 0,\n" +
                "      \"name\": \"string\"\n" +
                "    }\n" +
                "  ],\n" +
                "  \"status\": \"available\"\n" +
                "}";

        Response response = RestAssured.given()
                .contentType(ContentType.JSON)
                .body(updatedRequestBody)
                .put(BASE_URI + PET_ENDPOINT);

        // Validar el status code esperado
        response.then().statusCode(200);

        // Validar el schema del response (puedes agregar más validaciones según la estructura esperada)
        response.then().assertThat().body("name", equalTo("updatedName"));
    }
}
